name: CI/CD for Claude Dev

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

env:
  NODE_VERSION: '20'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install dependencies
      run: npm run install:all
    - name: Run linter
      run: npm run lint
    - name: Build extension
      run: npm run package
    - name: Install vsce
      run: npm install -g @vscode/vsce
    - name: Package Extension
      run: vsce package
    - name: Get VSIX filename and version
      id: get-info
      run: |
        echo "vsix_name=$(ls *.vsix)" >> $GITHUB_OUTPUT
        echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    - name: Upload to Azure Blob Storage
      uses: azure/CLI@v1
      env:
        AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
      with:
        inlineScript: |
          if [ -z "$AZURE_STORAGE_CONNECTION_STRING" ]; then
            echo "Error: AZURE_STORAGE_CONNECTION_STRING is empty"
            exit 1
          fi
          
          echo "Uploading VSIX file..."
          az storage blob upload --container-name vscode-extension --file "${{ steps.get-info.outputs.vsix_name }}" --name "${{ steps.get-info.outputs.vsix_name }}" --overwrite true
          if [ $? -ne 0 ]; then
            echo "Error: Failed to upload VSIX file"
            exit 1
          fi
          
          echo "Creating and uploading version.txt..."
          echo "${{ steps.get-info.outputs.vsix_name }}" > version.txt
          az storage blob upload --container-name vscode-extension --file version.txt --name version.txt --overwrite true
          if [ $? -ne 0 ]; then
            echo "Error: Failed to upload version.txt"
            exit 1
          fi
          
          echo "Upload completed successfully"
    - name: Install GitHub CLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
    - name: Create Release and Upload Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v${{ steps.get-info.outputs.version }}" \
          --title "Release v${{ steps.get-info.outputs.version }}" \
          --notes "Release notes for version ${{ steps.get-info.outputs.version }}" \
          "${{ steps.get-info.outputs.vsix_name }}"
